//Lucía Lavagnino 22185
//Ingeniería biomédica 
//Proyecto 1 Electrónica digital 2

#include <Arduino.h> // Librería base para Arduino
#include "driver/ledc.h" // Librería para controlar PWM en ESP32
#include "config.h" // Configuración específica para Adafruit IO

// Defino un feed para el termómetro en Adafruit IO
AdafruitIO_Feed *termometro = io.feed("Proyecto_L");

// Estructura para manejar el botón de forma sencilla
struct Boton {
    const uint8_t pin;  // Pin al que está conectado el botón
    bool pressed;       // Estado del botón (si fue presionado)
    bool lastState;     // Estado previo del botón
    unsigned long lastDebounceTime; // Tiempo de la última acción del botón
    unsigned long debounceDelay;    // Tiempo de retardo para evitar rebote
};

// Instancio un botón en el pin 35
Boton Sub = {35, false, false, 0, 3};

// Defino un semáforo para las interrupciones, para asegurar que no se interrumpa el código
portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;

// Función de interrupción para manejar el botón
void IRAM_ATTR handle_Sub() {
    portENTER_CRITICAL_ISR(&mux); // Inicio sección crítica
    unsigned long currentTime = millis();
    // Si el tiempo desde la última acción es mayor que el retardo, marco el botón como presionado
    if ((currentTime - Sub.lastDebounceTime) > Sub.debounceDelay) {
        Sub.pressed = true;
        Sub.lastDebounceTime = currentTime;
    }
    portEXIT_CRITICAL_ISR(&mux); // Fin de sección crítica
}

#define Ttemperatura 34 // Pin donde se conecta el sensor de temperatura

// Defino los pines para los LEDs RGB
#define LedVerde 5
#define LedAmarillo 18
#define LedRojo 19

// Configuración de PWM para los LEDs
#define freqPWM 5000
#define resolutionPWM 8
#define canalPWMVerde 0
#define canalPWMAmarillo 1
#define canalPWMRojo 2

// Configuración de PWM para el servo motor
#define canalPWMservo 3
#define freqPWMservo 50 // Frecuencia estándar para servos
#define resPWMservo 16  // Resolución alta para mayor precisión en el movimiento del servo

// Pines para controlar los segmentos del display de 7 segmentos
#define PuntoPin 33
#define A 14
#define B 13
#define C 32
#define D 26
#define E 25
#define F 12  
#define G 27

// Pines para seleccionar cuál display de 7 segmentos está activo
#define Display1 23
#define Display2 22
#define Display3 21

// Pin para controlar el servo motor
#define ServoPin 2

// Mapa de segmentos para mostrar los dígitos 0-9 en los displays
byte segmentos[] = {
    0b00111111, // 0
    0b00000110, // 1
    0b01011011, // 2
    0b01001111, // 3
    0b01100110, // 4
    0b01101101, // 5
    0b01111101, // 6
    0b00000111, // 7
    0b01111111, // 8
    0b01101111  // 9
};

// Variables para manejar la temperatura y el tiempo de actualización del display
int valorTemperaturaAnterior = -1;
unsigned long tiempoAnteriorDisplay = 0;
const unsigned long intervaloDisplay = 5; // Intervalo para refrescar los displays

// Función para mostrar un dígito en el display de 7 segmentos
void mostrarDigito(byte valor, bool punto) {
    // Escribir en cada segmento si debe estar encendido o apagado
    digitalWrite(A, valor & 0b00000001);
    digitalWrite(B, valor & 0b00000010);
    digitalWrite(C, valor & 0b00000100);
    digitalWrite(D, valor & 0b00001000);
    digitalWrite(E, valor & 0b00010000);
    digitalWrite(F, valor & 0b00100000);
    digitalWrite(G, valor & 0b01000000);
    digitalWrite(PuntoPin, punto ? HIGH : LOW); // Controlar el punto decimal
}

// Función para mostrar un número flotante en los tres displays de 7 segmentos
void mostrarNumero(float numero) {
    // Convierto el número a entero multiplicando por 10 para manejar un decimal
    int numeroEntero = (int)(numero * 10);
    int centenas = (numeroEntero / 100) % 10; // Extraigo la centena
    int decenas = (numeroEntero / 10) % 10;   // Extraigo la decena
    int unidades = numeroEntero % 10;         // Extraigo la unidad
    bool puntoDecimal = true; // Mostrar punto decimal en el dígito de las decenas

    // Multiplexeo para mostrar cada dígito en su respectivo display
    for (int i = 0; i < 10; i++) { // Ciclos para reducir parpadeo
        // Mostrar centena
        digitalWrite(Display1, HIGH);
        mostrarDigito(segmentos[centenas], false);
        delay(1); // Pequeño retraso
        digitalWrite(Display1, LOW);

        // Mostrar decena
        digitalWrite(Display2, HIGH);
        mostrarDigito(segmentos[decenas], puntoDecimal);
        delay(1); // Pequeño retraso
        digitalWrite(Display2, LOW);

        // Mostrar unidad
        digitalWrite(Display3, HIGH);
        mostrarDigito(segmentos[unidades], false);
        delay(1); // Pequeño retraso
        digitalWrite(Display3, LOW);
    }
}

void setup() {
    // Configuración de pines de los displays de 7 segmentos
    pinMode(A, OUTPUT);
    pinMode(B, OUTPUT);
    pinMode(C, OUTPUT);
    pinMode(D, OUTPUT);
    pinMode(E, OUTPUT);
    pinMode(F, OUTPUT);
    pinMode(G, OUTPUT);
    pinMode(PuntoPin, OUTPUT);

    pinMode(Display1, OUTPUT);
    pinMode(Display2, OUTPUT);
    pinMode(Display3, OUTPUT);

    pinMode(Ttemperatura, INPUT); // Pin para leer la temperatura

    // Configuración de los canales PWM para cada LED
    ledcSetup(canalPWMVerde, freqPWM, resolutionPWM);
    ledcAttachPin(LedVerde, canalPWMVerde);

    ledcSetup(canalPWMAmarillo, freqPWM, resolutionPWM);
    ledcAttachPin(LedAmarillo, canalPWMAmarillo);

    ledcSetup(canalPWMRojo, freqPWM, resolutionPWM);
    ledcAttachPin(LedRojo, canalPWMRojo);

    // Configuración del botón y la interrupción para detectar pulsaciones
    pinMode(Sub.pin, INPUT_PULLUP);
    attachInterrupt(digitalPinToInterrupt(Sub.pin), handle_Sub, FALLING);

    // Configuración del servo motor
    ledcSetup(canalPWMservo, freqPWMservo, resPWMservo);
    ledcAttachPin(ServoPin, canalPWMservo);
    ledcWrite(canalPWMservo, 3277); // Posición inicial del servo

    // Iniciar comunicación serial para debug
    Serial.begin(115200);
    while(!Serial); // Esperar a que se inicie la comunicación serial
    Serial.print("Connecting to Adafruit IO");
    
    // Conectarse a Adafruit IO
    io.connect();
    while(io.status() < AIO_CONNECTED) {
        Serial.print(".");
        delay(500);
    }
    // Imprimir estado de conexión
    Serial.println();
    Serial.println(io.statusText());
}

void loop() {
    // Leer el valor analógico del sensor de temperatura
    int valorTemperatura = analogRead(Ttemperatura);
    // Convertir el valor a voltaje y luego a temperatura
    float voltaje = valorTemperatura * (3.3 / 4095.0);
    float temperatura = voltaje * 100;

    // Mostrar la temperatura en los displays de 7 segmentos
    mostrarNumero(temperatura);  
       
    // Si el botón fue presionado
    if (Sub.pressed) {
        io.run(); // Ejecutar Adafruit IO para enviar datos
        Serial.print("Temperatura: ");
        Serial.println(temperatura);
        
        // Control de LEDs y servo basado en la temperatura
        if (temperatura < 15.0) {
            Serial.println("Encendiendo LED Verde");
            ledcWrite(canalPWMVerde, 255); // LED verde encendido
            ledcWrite(canalPWMAmarillo, 0); // LED amarillo apagado
            ledcWrite(canalPWMRojo, 0); // LED rojo apagado
            ledcWrite(canalPWMservo, 1638); // Posición del servo para baja temperatura
        } else if (temperatura >= 15.0 && temperatura < 20.0) {
            Serial.println("Encendiendo LED Amarillo");
            ledcWrite(canalPWMVerde, 0); // LED verde apagado
            ledcWrite(canalPWMAmarillo, 255); // LED amarillo encendido
            ledcWrite(canalPWMRojo, 0); // LED rojo apagado
            ledcWrite(canalPWMservo, 3277); // Posición del servo para temperatura media
        } else {
            Serial.println("Encendiendo LED Rojo");
            ledcWrite(canalPWMVerde, 0); // LED verde apagado
            ledcWrite(canalPWMAmarillo, 0); // LED amarillo apagado
            ledcWrite(canalPWMRojo, 255); // LED rojo encendido
            ledcWrite(canalPWMservo, 4915); // Posición del servo para alta temperatura
        }
        
        // Enviar temperatura a Adafruit IO
        termometro->save(temperatura);
        Sub.pressed = false; // Restablecer estado del botón
    }
    
    // Pequeño retraso para evitar sobrecargar el microcontrolador
    delay(10);
}
