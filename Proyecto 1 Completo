#include <Arduino.h>
#include "driver/ledc.h"
#include <ESP32Servo.h>  // Incluir la biblioteca ESP32Servo
#include <config.h> 

AdafruitIO_Feed *temperCanal = io.feed("Proyecto_L");

// Entrada de temperatura al sensor
struct Boton {
    const uint8_t boton_Sub;
    bool pressed;
    bool lastState;
};

Boton Sub = {35, false, false};
// Definir un semáforo para las interrupciones
portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;

// Interrupción para el botón
void IRAM_ATTR handle_Sub(){
    portENTER_CRITICAL_ISR(&mux);
    Sub.pressed = true;
    portEXIT_CRITICAL_ISR(&mux);
}

#define Ttemperatura 34

// Entradas de display
#define LedVerde 5
#define LedAmarillo 18
#define LedRojo 19

// Configuración de PWM para los LEDs RGB
#define freqPWM 5000
#define resolutionPWM 8
#define canalPWMVerde 0
#define canalPWMAmarillo 1
#define canalPWMRojo 2
#define canalPWMservo 6
#define freqPWMservo 50
#define resPWMservo 10

// Segmentos del Display
#define Punto 33
#define A 14
#define B 13
#define C 32
#define D 26
#define E 25
#define F 12  
#define G 27

// Pines para el control de los displays
#define Display1 23
#define Display2 22
#define Display3 21

// Servo
#define ServoPin 15
int servoPosition[] = {26, 51, 77, 102, 128};
int y = 0;

Servo myServo;  // Crear un objeto Servo

// Mapa de segmentos para dígitos 0-9
byte segmentos[] = {
    0b00111111, // 0
    0b00000110, // 1
    0b01011011, // 2
    0b01001111, // 3
    0b01100110, // 4
    0b01101101, // 5
    0b01111101, // 6
    0b00000111, // 7
    0b01111111, // 8
    0b01101111  // 9
};

// Variables para el valor del sensor de temperatura
int valorTemperaturaAnterior = -1;

// Función para mostrar un dígito en el display
void mostrarDigito(byte valor, bool punto) {
    // Asignar cada segmento
    digitalWrite(A, valor & 0b00000001);
    digitalWrite(B, valor & 0b00000010);
    digitalWrite(C, valor & 0b00000100);
    digitalWrite(D, valor & 0b00001000);
    digitalWrite(E, valor & 0b00010000);
    digitalWrite(F, valor & 0b00100000);
    digitalWrite(G, valor & 0b01000000);
    digitalWrite(Punto, punto ? HIGH : LOW);  // Encender o apagar el punto decimal
}

void mostrarNumero(int numero) {
    // Obtener cada dígito
    int centenas = numero / 100;
    int decenas = (numero / 10) % 10;
    int unidades = numero % 10;

    // Mostrar centena (si no es cero)
    if (centenas > 0) {
        digitalWrite(Display1, HIGH); // Encender el display 1
        mostrarDigito(segmentos[centenas], false); // Mostrar el dígito de la centena
        delay(1.5); // Corto delay para mantener sincronía
        digitalWrite(Display1, LOW); // Apagar el display 1
    }

    // Mostrar decena con punto decimal
    digitalWrite(Display2, HIGH); // Encender el display 2
    mostrarDigito(segmentos[decenas], true); // Mostrar el dígito de la decena con punto decimal
    delay(1.5); // Corto delay para mantener sincronía
    digitalWrite(Display2, LOW); // Apagar el display 2

    // Mostrar unidad
    digitalWrite(Display3, HIGH); // Encender el display 3
    mostrarDigito(segmentos[unidades], false); // Mostrar el dígito de la unidad
    delay(1.5); // Corto delay para mantener sincronía
    digitalWrite(Display3, LOW); // Apagar el display 3
}

void setup() {
    pinMode(A, OUTPUT);
    pinMode(B, OUTPUT);
    pinMode(C, OUTPUT);
    pinMode(D, OUTPUT);
    pinMode(E, OUTPUT);
    pinMode(F, OUTPUT);
    pinMode(G, OUTPUT);
    pinMode(Punto, OUTPUT);

    // Configurar pines de los displays como salida
    pinMode(Display1, OUTPUT);
    pinMode(Display2, OUTPUT);
    pinMode(Display3, OUTPUT);

    // Configurar el pin del sensor de temperatura como entrada analógica
    pinMode(Ttemperatura, INPUT);

    // Inicializar la comunicación serial
    Serial.begin(115200);

    // Configurar PWM para cada LED RGB
    ledcSetup(canalPWMVerde, freqPWM, resolutionPWM);
    ledcAttachPin(LedVerde, canalPWMVerde);

    ledcSetup(canalPWMAmarillo, freqPWM, resolutionPWM);
    ledcAttachPin(LedAmarillo, canalPWMAmarillo);

    ledcSetup(canalPWMRojo, freqPWM, resolutionPWM);
    ledcAttachPin(LedRojo, canalPWMRojo);

    // Configurar el pin del botón como entrada con resistencia interna pull-up
    pinMode(Sub.boton_Sub, INPUT_PULLUP);
    attachInterrupt(digitalPinToInterrupt(Sub.boton_Sub), handle_Sub, FALLING);

    // Inicializar el servo en el pin 15
    myServo.attach(ServoPin);

    // Configurar la comunicación serial
  Serial.begin(115200);


  while(! Serial);


  Serial.print("Conectando a Adafruit IO");


  io.connect();


   while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }


  // we are connected
  Serial.println();
  Serial.println(io.statusText());

}

void loop() {
    io.run();
    // Leer el valor del sensor de temperatura
    int valorTemperatura = analogRead(Ttemperatura);

    // Convertir el valor leído a temperatura en grados Celsius
    float voltaje = valorTemperatura * (3.3 / 4095.0);
    float temperatura = voltaje * 100;  // LM35 da 10mV por grado Celsius

    // Convertir la temperatura a un valor entero para mostrar
    int numero = (int)(temperatura * 10); // Para mostrar un decimal

    // Actualizar los displays continuamente
    mostrarNumero(numero);
    
    Serial.print("Enviando--> ");
    Serial.println(Ttemperatura);
    temperCanal->save(Ttemperatura);

    // Controlar los LEDs y el servo solo cuando el botón se presione
    if (Sub.pressed) {
        Serial.print("Temperatura: ");
        Serial.println(temperatura);
        if (temperatura < 37.0) {
            Serial.println("Encendiendo LED Verde");
            ledcWrite(canalPWMVerde, 255);    // Encender LED verde
            ledcWrite(canalPWMAmarillo, 0);   // Apagar LED amarillo
            ledcWrite(canalPWMRojo, 0);       // Apagar LED rojo
            myServo.write(0); // Posición por defecto si no hay LEDs encendidos
        } else if (temperatura >= 37 && temperatura < 50) {
            Serial.println("Encendiendo LED Amarillo");
            ledcWrite(canalPWMVerde, 0);      // Apagar LED verde
            ledcWrite(canalPWMAmarillo, 255); // Encender LED amarillo
            ledcWrite(canalPWMRojo, 0);       // Apagar LED rojo
            myServo.write(45); // Mover el servo a 45 grados
        } else {
            Serial.println("Encendiendo LED Rojo");
            ledcWrite(canalPWMVerde, 0);      // Apagar LED verde
            ledcWrite(canalPWMAmarillo, 0);   // Apagar LED amarillo
            ledcWrite(canalPWMRojo, 255);     // Encender LED rojo
            myServo.write(90); // Mover el servo a 90 grados
        }
        Sub.pressed = false; // Reiniciar el estado de presionado del botón
    }
}
