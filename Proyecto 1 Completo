#include <Arduino.h>
#include "driver/ledc.h"
#include <config.h>


//El nombre de mi dashboard de adafruit
AdafruitIO_Feed *temperCanal = io.feed("Proyecto_L");


// Estructura para manejar el botón
struct Boton {
    const uint8_t pin;
    bool pressed;
    bool lastState;
    unsigned long lastDebounceTime;
    unsigned long debounceDelay;
};


// Instancia del botón
Boton Sub = {35, false, false, 0, 50};


// Definir un semáforo para las interrupciones
portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;


// Interrupción para el botón
void IRAM_ATTR handle_Sub() {
    portENTER_CRITICAL_ISR(&mux);
    unsigned long currentTime = millis();
    // Antirrebote por interrupción
    if ((currentTime - Sub.lastDebounceTime) > Sub.debounceDelay) {
        Sub.pressed = true;
        Sub.lastDebounceTime = currentTime;
    }
    portEXIT_CRITICAL_ISR(&mux);
}


#define Ttemperatura 34


// Entradas de display
#define LedVerde 5
#define LedAmarillo 18
#define LedRojo 19


// Configuración de PWM para los LEDs RGB
#define freqPWM 5000
#define resolutionPWM 8
#define canalPWMVerde 0
#define canalPWMAmarillo 1
#define canalPWMRojo 2


// Configuración de PWM para el servo
#define canalPWMservo 6
#define freqPWMservo 50      // Frecuencia de 50 Hz para el control del servo
#define resPWMservo 16       // Resolución de 16 bits para un control fino


// Segmentos del Display
#define Punto 33
#define A 14
#define B 13
#define C 32
#define D 26
#define E 25
#define F 12  
#define G 27


// Pines para el control de los displays
#define Display1 23
#define Display2 22
#define Display3 21


// Servo
#define ServoPin 2


// Mapa de segmentos para dígitos 0-9
byte segmentos[] = {
    0b00111111, // 0
    0b00000110, // 1
    0b01011011, // 2
    0b01001111, // 3
    0b01100110, // 4
    0b01101101, // 5
    0b01111101, // 6
    0b00000111, // 7
    0b01111111, // 8
    0b01101111  // 9
};


// Variables para el valor del sensor de temperatura
int valorTemperaturaAnterior = -1;
unsigned long tiempoAnteriorDisplay = 0;
const unsigned long intervaloDisplay = 5; // Intervalo para refrescar los displays


void mostrarDigito(byte valor, bool punto) {
    // Asignar cada segmento
    digitalWrite(A, valor & 0b00000001);
    digitalWrite(B, valor & 0b00000010);
    digitalWrite(C, valor & 0b00000100);
    digitalWrite(D, valor & 0b00001000);
    digitalWrite(E, valor & 0b00010000);
    digitalWrite(F, valor & 0b00100000);
    digitalWrite(G, valor & 0b01000000);
    digitalWrite(Punto, punto ? HIGH : LOW);  // Encender o apagar el punto decimal
}


void mostrarNumero(int numero) {
    // Obtener cada dígito
    int centenas = numero / 100;
    int decenas = (numero / 10) % 10;
    int unidades = numero % 10;


    // Mostrar centena
    digitalWrite(Display1, HIGH);
    mostrarDigito(segmentos[centenas], false);
    delay(5);
    digitalWrite(Display1, LOW);


    // Mostrar decena con punto decimal
    digitalWrite(Display2, HIGH);
    mostrarDigito(segmentos[decenas], true);
    delay(5);
    digitalWrite(Display2, LOW);


    // Mostrar unidad
    digitalWrite(Display3, HIGH);
    mostrarDigito(segmentos[unidades], false);
    delay(5);
    digitalWrite(Display3, LOW);
}


void setup() {
    pinMode(A, OUTPUT);
    pinMode(B, OUTPUT);
    pinMode(C, OUTPUT);
    pinMode(D, OUTPUT);
    pinMode(E, OUTPUT);
    pinMode(F, OUTPUT);
    pinMode(G, OUTPUT);
    pinMode(Punto, OUTPUT);


    pinMode(Display1, OUTPUT);
    pinMode(Display2, OUTPUT);
    pinMode(Display3, OUTPUT);


    pinMode(Ttemperatura, INPUT);


    Serial.begin(115200);


    ledcSetup(canalPWMVerde, freqPWM, resolutionPWM);
    ledcAttachPin(LedVerde, canalPWMVerde);


    ledcSetup(canalPWMAmarillo, freqPWM, resolutionPWM);
    ledcAttachPin(LedAmarillo, canalPWMAmarillo);


    ledcSetup(canalPWMRojo, freqPWM, resolutionPWM);
    ledcAttachPin(LedRojo, canalPWMRojo);


    pinMode(Sub.pin, INPUT_PULLUP);
    attachInterrupt(digitalPinToInterrupt(Sub.pin), handle_Sub, FALLING);


    ledcSetup(canalPWMservo, freqPWMservo, resPWMservo);
    ledcAttachPin(ServoPin, canalPWMservo);


    ledcWrite(canalPWMservo, 3277);


// Que me muestre si el adafruit se conecta 
 // Configurar la comunicación serial
  Serial.begin(115200);


  while(! Serial);


  Serial.print("Conectando a Adafruit IO");


  io.connect();


   while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
}

//Loop para que los leds se enciendan siempre y cuando se haga la interrupción con el botón
void loop() {
io.run();
    int valorTemperatura = analogRead(Ttemperatura);
    float voltaje = valorTemperatura * (3.3 / 4095.0);
    float temperatura = voltaje * 100;


    int numero = (int)(temperatura * 10);


    unsigned long tiempoActual = millis();
    if (tiempoActual - tiempoAnteriorDisplay >= intervaloDisplay) {
        tiempoAnteriorDisplay = tiempoActual;
        mostrarNumero(numero);
    }


    if (Sub.pressed) {
        Serial.print("Temperatura: ");
        Serial.println(temperatura);
        if (temperatura < 15.0) {
            Serial.println("Encendiendo LED Verde");
            ledcWrite(canalPWMVerde, 255);
            ledcWrite(canalPWMAmarillo, 0);
            ledcWrite(canalPWMRojo, 0);
            ledcWrite(canalPWMservo, 1638);
        } else if (temperatura >= 15.0 && temperatura < 20.0) {
            Serial.println("Encendiendo LED Amarillo");
            ledcWrite(canalPWMVerde, 0);
            ledcWrite(canalPWMAmarillo, 255);
            ledcWrite(canalPWMRojo, 0);
            ledcWrite(canalPWMservo, 3277);
        } else {
            Serial.println("Encendiendo LED Rojo");
            ledcWrite(canalPWMVerde, 0);
            ledcWrite(canalPWMAmarillo, 0);
            ledcWrite(canalPWMRojo, 255);
            ledcWrite(canalPWMservo, 4915);
        }


        Sub.pressed = false;
mostrarNumero(temperatura);
    }


    delay(10); // Ajustar este valor si es necesario
}
